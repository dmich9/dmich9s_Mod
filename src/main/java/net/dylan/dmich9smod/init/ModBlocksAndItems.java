package net.dylan.dmich9smod.init;

import net.dylan.dmich9smod.common.block.*;
import net.dylan.dmich9smod.common.block.trees.*;
import net.dylan.dmich9smod.common.item.*;
import net.dylan.dmich9smod.core.dmich9sMod;
import net.dylan.dmich9smod.common.entity.ModBoat;
import net.dylan.dmich9smod.common.util.ModCreativeModeTab;
import net.minecraft.core.BlockPos;
import net.minecraft.core.Direction;
import net.minecraft.core.particles.ParticleTypes;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.tags.TagKey;
import net.minecraft.world.effect.MobEffects;
import net.minecraft.world.entity.EquipmentSlot;
import net.minecraft.world.item.*;
import net.minecraft.world.level.BlockGetter;
import net.minecraft.world.level.block.*;
import net.minecraft.world.level.block.state.BlockBehaviour;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraft.world.level.material.Material;
import net.minecraft.world.level.material.MaterialColor;
import net.minecraftforge.common.ForgeSpawnEggItem;
import net.minecraftforge.eventbus.api.IEventBus;
import net.minecraftforge.registries.DeferredRegister;
import net.minecraftforge.registries.ForgeRegistries;
import net.minecraftforge.registries.RegistryObject;

import java.util.function.Supplier;

@SuppressWarnings("unused")
public class ModBlocksAndItems {
    public static final DeferredRegister<Block> BLOCKS = DeferredRegister.create(ForgeRegistries.BLOCKS, dmich9sMod.MOD_ID);
    public static final DeferredRegister<Item> ITEMS = DeferredRegister.create(ForgeRegistries.ITEMS, dmich9sMod.MOD_ID);

    private static final TagKey<Block> DREAM_SAPLING_PLACEABLE_ON = ForgeRegistries.BLOCKS.tags().createTagKey(new ResourceLocation(dmich9sMod.MOD_ID, "dream_sapling_placeable_on"));
    private static final TagKey<Block> FRACTURED_SAPLING_PLACEABLE_ON = ForgeRegistries.BLOCKS.tags().createTagKey(new ResourceLocation(dmich9sMod.MOD_ID, "fractured_sapling_placeable_on"));
    private static final TagKey<Block> GIANT_SAPLING_PLACEABLE_ON = ForgeRegistries.BLOCKS.tags().createTagKey(new ResourceLocation(dmich9sMod.MOD_ID, "giant_sapling_placeable_on"));

    public static final RegistryObject<Item> CARNELIAN_SWORD = ITEMS.register("carnelian_sword", () -> new SwordItem(ModTiers.CARNELIAN,0,-2.4f, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> CARNELIAN_PICKAXE = ITEMS.register("carnelian_pickaxe", () -> new PickaxeItem(ModTiers.CARNELIAN,-2,-2.8f, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> CARNELIAN_AXE = ITEMS.register("carnelian_axe", () -> new AxeItem(ModTiers.CARNELIAN,1.0f,-3.2f, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> CARNELIAN_SHOVEL = ITEMS.register("carnelian_shovel", () -> new ShovelItem(ModTiers.CARNELIAN,-1.5f,-3.0f, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> CARNELIAN_HOE = ITEMS.register("carnelian_hoe", () -> new HoeItem(ModTiers.CARNELIAN,-4,-3.0f, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> CARNELIAN_HELMET = ITEMS.register("carnelian_helmet", () -> new ArmorItem(ModArmorMaterials.CARNELIAN, EquipmentSlot.HEAD, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> CARNELIAN_CHESTPLATE = ITEMS.register("carnelian_chestplate", () -> new ArmorItem(ModArmorMaterials.CARNELIAN, EquipmentSlot.CHEST, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> CARNELIAN_LEGGINGS = ITEMS.register("carnelian_leggings", () -> new ArmorItem(ModArmorMaterials.CARNELIAN, EquipmentSlot.LEGS, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> CARNELIAN_BOOTS = ITEMS.register("carnelian_boots", () -> new ArmorItem(ModArmorMaterials.CARNELIAN, EquipmentSlot.FEET, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> STRONTIUM_SWORD = ITEMS.register("strontium_sword", () -> new SwordItem(ModTiers.STRONTIUM,0,-2.4f, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> STRONTIUM_PICKAXE = ITEMS.register("strontium_pickaxe", () -> new PickaxeItem(ModTiers.STRONTIUM,-2,-2.8f, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> STRONTIUM_AXE = ITEMS.register("strontium_axe", () -> new AxeItem(ModTiers.STRONTIUM,2.0f,-3.2f, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> STRONTIUM_SHOVEL = ITEMS.register("strontium_shovel", () -> new ShovelItem(ModTiers.STRONTIUM,-1.5f,-3.0f, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> STRONTIUM_HOE = ITEMS.register("strontium_hoe", () -> new HoeItem(ModTiers.STRONTIUM,-4,-2.0f, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> STRONTIUM_HELMET = ITEMS.register("strontium_helmet", () -> new ArmorItem(ModArmorMaterials.STRONTIUM, EquipmentSlot.HEAD, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> STRONTIUM_CHESTPLATE = ITEMS.register("strontium_chestplate", () -> new ArmorItem(ModArmorMaterials.STRONTIUM, EquipmentSlot.CHEST, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> STRONTIUM_LEGGINGS = ITEMS.register("strontium_leggings", () -> new ArmorItem(ModArmorMaterials.STRONTIUM, EquipmentSlot.LEGS, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> STRONTIUM_BOOTS = ITEMS.register("strontium_boots", () -> new ArmorItem(ModArmorMaterials.STRONTIUM, EquipmentSlot.FEET, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> GARNET_SWORD = ITEMS.register("garnet_sword", () -> new SwordItem(ModTiers.GARNET,1,-2.4f, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> GARNET_PICKAXE = ITEMS.register("garnet_pickaxe", () -> new PickaxeItem(ModTiers.GARNET,-1,-2.8f, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> GARNET_AXE = ITEMS.register("garnet_axe", () -> new AxeItem(ModTiers.GARNET,3.0f,-3.0f, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> GARNET_SHOVEL = ITEMS.register("garnet_shovel", () -> new ShovelItem(ModTiers.GARNET,-0.5f,-3.0f, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> GARNET_HOE = ITEMS.register("garnet_hoe", () -> new HoeItem(ModTiers.GARNET,-4,-1.0f, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> GARNET_HELMET = ITEMS.register("garnet_helmet", () -> new ArmorItem(ModArmorMaterials.GARNET, EquipmentSlot.HEAD, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> GARNET_CHESTPLATE = ITEMS.register("garnet_chestplate", () -> new ArmorItem(ModArmorMaterials.GARNET, EquipmentSlot.CHEST, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> GARNET_LEGGINGS = ITEMS.register("garnet_leggings", () -> new ArmorItem(ModArmorMaterials.GARNET, EquipmentSlot.LEGS, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> GARNET_BOOTS = ITEMS.register("garnet_boots", () -> new ArmorItem(ModArmorMaterials.GARNET, EquipmentSlot.FEET, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> AZURITE_SWORD = ITEMS.register("azurite_sword", () -> new SwordItem(ModTiers.AZURITE,2,-2.4f, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> AZURITE_PICKAXE = ITEMS.register("azurite_pickaxe", () -> new PickaxeItem(ModTiers.AZURITE,0,-2.8f, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> AZURITE_AXE = ITEMS.register("azurite_axe", () -> new AxeItem(ModTiers.AZURITE,4.0f,-3.0f, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> AZURITE_SHOVEL = ITEMS.register("azurite_shovel", () -> new ShovelItem(ModTiers.AZURITE,0.5f,-3.0f, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> AZURITE_HOE = ITEMS.register("azurite_hoe", () -> new HoeItem(ModTiers.AZURITE,-4,-1.0f, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> AZURITE_HELMET = ITEMS.register("azurite_helmet", () -> new ArmorItem(ModArmorMaterials.AZURITE, EquipmentSlot.HEAD, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> AZURITE_CHESTPLATE = ITEMS.register("azurite_chestplate", () -> new ArmorItem(ModArmorMaterials.AZURITE, EquipmentSlot.CHEST, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> AZURITE_LEGGINGS = ITEMS.register("azurite_leggings", () -> new ArmorItem(ModArmorMaterials.AZURITE, EquipmentSlot.LEGS, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> AZURITE_BOOTS = ITEMS.register("azurite_boots", () -> new ArmorItem(ModArmorMaterials.AZURITE, EquipmentSlot.FEET, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> SERENDIBITE_SWORD = ITEMS.register("serendibite_sword", () -> new SwordItem(ModTiers.SERENDIBITE,3,-2.4f, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> SERENDIBITE_PICKAXE = ITEMS.register("serendibite_pickaxe", () -> new PickaxeItem(ModTiers.SERENDIBITE,1,-2.8f, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> SERENDIBITE_AXE = ITEMS.register("serendibite_axe", () -> new AxeItem(ModTiers.SERENDIBITE,5.0f,-3.0f, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> SERENDIBITE_SHOVEL = ITEMS.register("serendibite_shovel", () -> new ShovelItem(ModTiers.SERENDIBITE,1.0f,-3.0f, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> SERENDIBITE_HOE = ITEMS.register("serendibite_hoe", () -> new HoeItem(ModTiers.SERENDIBITE,-4,0.0f, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> SERENDIBITE_HELMET = ITEMS.register("serendibite_helmet", () -> new ArmorItem(ModArmorMaterials.SERENDIBITE, EquipmentSlot.HEAD, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> SERENDIBITE_CHESTPLATE = ITEMS.register("serendibite_chestplate", () -> new ArmorItem(ModArmorMaterials.SERENDIBITE, EquipmentSlot.CHEST, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> SERENDIBITE_LEGGINGS = ITEMS.register("serendibite_leggings", () -> new ArmorItem(ModArmorMaterials.SERENDIBITE, EquipmentSlot.LEGS, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> SERENDIBITE_BOOTS = ITEMS.register("serendibite_boots", () -> new ArmorItem(ModArmorMaterials.SERENDIBITE, EquipmentSlot.FEET, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> AMBROSIA_SWORD = ITEMS.register("ambrosia_sword", () -> new SwordItem(ModTiers.AMBROSIA,4,-2.4f, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> AMBROSIA_PICKAXE = ITEMS.register("ambrosia_pickaxe", () -> new PickaxeItem(ModTiers.AMBROSIA,1,-2.8f, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> AMBROSIA_AXE = ITEMS.register("ambrosia_axe", () -> new AxeItem(ModTiers.AMBROSIA,6.0f,-2.8f, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> AMBROSIA_SHOVEL = ITEMS.register("ambrosia_shovel", () -> new ShovelItem(ModTiers.AMBROSIA,1.5f,-3.0f, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> AMBROSIA_HOE = ITEMS.register("ambrosia_hoe", () -> new HoeItem(ModTiers.AMBROSIA,-4,0.0f, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> AMBROSIA_HELMET = ITEMS.register("ambrosia_helmet", () -> new ModArmorItem(ModArmorMaterials.AMBROSIA, EquipmentSlot.HEAD, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> AMBROSIA_CHESTPLATE = ITEMS.register("ambrosia_chestplate", () -> new ArmorItem(ModArmorMaterials.AMBROSIA, EquipmentSlot.CHEST, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> AMBROSIA_LEGGINGS = ITEMS.register("ambrosia_leggings", () -> new ArmorItem(ModArmorMaterials.AMBROSIA, EquipmentSlot.LEGS, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> AMBROSIA_BOOTS = ITEMS.register("ambrosia_boots", () -> new ArmorItem(ModArmorMaterials.AMBROSIA, EquipmentSlot.FEET, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Block> ANGUISH_LOG = registerBlock("anguish_log", () -> new ModFlammableRotatedPillarBlock(BlockBehaviour.Properties.copy(Blocks.OAK_LOG)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> STRIPPED_ANGUISH_LOG = registerBlock("stripped_anguish_log", () -> new ModFlammableRotatedPillarBlock(BlockBehaviour.Properties.copy(Blocks.STRIPPED_OAK_LOG)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> ANGUISH_WOOD = registerBlock("anguish_wood", () -> new ModFlammableRotatedPillarBlock(BlockBehaviour.Properties.copy(Blocks.OAK_WOOD)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> STRIPPED_ANGUISH_WOOD = registerBlock("stripped_anguish_wood", () -> new ModFlammableRotatedPillarBlock(BlockBehaviour.Properties.copy(Blocks.STRIPPED_OAK_WOOD)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> ANGUISH_PLANKS = registerBlock("anguish_planks", () -> new Block(BlockBehaviour.Properties.copy(Blocks.OAK_PLANKS)) {@Override public boolean isFlammable(BlockState state, BlockGetter world, BlockPos pos, Direction face) {return true;}@Override public int getFlammability(BlockState state, BlockGetter world, BlockPos pos, Direction face) {return 20;}@Override public int getFireSpreadSpeed(BlockState state, BlockGetter world, BlockPos pos, Direction face) {return 5;}}, ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> ANGUISH_STAIRS = registerBlock("anguish_stairs", () -> new StairBlock(() -> ModBlocksAndItems.ANGUISH_PLANKS.get().defaultBlockState(), BlockBehaviour.Properties.of(Material.WOOD).strength(1f)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> ANGUISH_SLAB = registerBlock("anguish_slab", () -> new SlabBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(1f)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> ANGUISH_FENCE = registerBlock("anguish_fence", () -> new FenceBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(1f).noCollission()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> ANGUISH_FENCE_GATE = registerBlock("anguish_fence_gate", () -> new FenceGateBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(1f).noCollission()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> ANGUISH_DOOR = registerBlock("anguish_door", () -> new DoorBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(1f).noOcclusion()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> ANGUISH_TRAPDOOR = registerBlock("anguish_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(1f).noOcclusion()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> ANGUISH_BUTTON = registerBlock("anguish_button", () -> new WoodButtonBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(1f).noCollission()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> ANGUISH_PRESSURE_PLATE = registerBlock("anguish_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, BlockBehaviour.Properties.of(Material.WOOD).strength(1f)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> ANGUISH_SIGN = BLOCKS.register("anguish_sign", () -> new AnguishStandingSignBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(1f).noCollission(), ModWoodTypes.ANGUISH));
    public static final RegistryObject<Block> ANGUISH_WALL_SIGN = BLOCKS.register("anguish_wall_sign", () -> new AnguishWallSignBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(1f).noCollission(), ModWoodTypes.ANGUISH));
    public static final RegistryObject<Item> ANGUISH_SIGN_ITEM = ITEMS.register("anguish_sign", () -> new SignItem(new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB).stacksTo(16), ModBlocksAndItems.ANGUISH_SIGN.get(), ModBlocksAndItems.ANGUISH_WALL_SIGN.get()));
    public static final RegistryObject<Item> ANGUISH_BOAT = ITEMS.register("anguish_boat", () -> new ModBoatItem(new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB), ModBoat.Type.ANGUISH));
    public static final RegistryObject<Item> ANGUISH_SHARD = ITEMS.register("anguish_shard", () -> new Item(new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Block> ANGUISH_SAPLING = registerBlock("anguish_sapling", () -> new ModSaplingBlock(new ModTreeGrower("anguish_tree"),BlockBehaviour.Properties.copy(Blocks.OAK_SAPLING), GIANT_SAPLING_PLACEABLE_ON), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> ANGUISH_LEAVES = registerBlock("anguish_leaves", () -> new LeavesBlock(BlockBehaviour.Properties.copy(Blocks.OAK_LEAVES)) {@Override public boolean isFlammable(BlockState state, BlockGetter world, BlockPos pos, Direction face) {return true;}@Override public int getFlammability(BlockState state, BlockGetter world, BlockPos pos, Direction face) {return 60;}@Override public int getFireSpreadSpeed(BlockState state, BlockGetter world, BlockPos pos, Direction face) {return 30;}}, ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> FRIGHT_LOG = registerBlock("fright_log", () -> new ModFlammableRotatedPillarBlock(BlockBehaviour.Properties.copy(Blocks.OAK_LOG)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> STRIPPED_FRIGHT_LOG = registerBlock("stripped_fright_log", () -> new ModFlammableRotatedPillarBlock(BlockBehaviour.Properties.copy(Blocks.STRIPPED_OAK_LOG)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> FRIGHT_WOOD = registerBlock("fright_wood", () -> new ModFlammableRotatedPillarBlock(BlockBehaviour.Properties.copy(Blocks.OAK_WOOD)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> STRIPPED_FRIGHT_WOOD = registerBlock("stripped_fright_wood", () -> new ModFlammableRotatedPillarBlock(BlockBehaviour.Properties.copy(Blocks.STRIPPED_OAK_WOOD)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> FRIGHT_PLANKS = registerBlock("fright_planks", () -> new Block(BlockBehaviour.Properties.copy(Blocks.OAK_PLANKS)) {@Override public boolean isFlammable(BlockState state, BlockGetter world, BlockPos pos, Direction face) {return true;}@Override public int getFlammability(BlockState state, BlockGetter world, BlockPos pos, Direction face) {return 20;}@Override public int getFireSpreadSpeed(BlockState state, BlockGetter world, BlockPos pos, Direction face) {return 5;}}, ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> FRIGHT_STAIRS = registerBlock("fright_stairs", () -> new StairBlock(() -> ModBlocksAndItems.FRIGHT_PLANKS.get().defaultBlockState(), BlockBehaviour.Properties.of(Material.WOOD).strength(1f)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> FRIGHT_SLAB = registerBlock("fright_slab", () -> new SlabBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(1f)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> FRIGHT_FENCE = registerBlock("fright_fence", () -> new FenceBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(1f).noCollission()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> FRIGHT_FENCE_GATE = registerBlock("fright_fence_gate", () -> new FenceGateBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(1f).noCollission()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> FRIGHT_DOOR = registerBlock("fright_door", () -> new DoorBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(1f).noOcclusion()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> FRIGHT_TRAPDOOR = registerBlock("fright_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(1f).noOcclusion()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> FRIGHT_BUTTON = registerBlock("fright_button", () -> new WoodButtonBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(1f).noCollission()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> FRIGHT_PRESSURE_PLATE = registerBlock("fright_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, BlockBehaviour.Properties.of(Material.WOOD).strength(1f)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> FRIGHT_SIGN = BLOCKS.register("fright_sign", () -> new FrightStandingSignBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(1f).noCollission(), ModWoodTypes.FRIGHT));
    public static final RegistryObject<Block> FRIGHT_WALL_SIGN = BLOCKS.register("fright_wall_sign", () -> new FrightWallSignBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(1f).noCollission(), ModWoodTypes.FRIGHT));
    public static final RegistryObject<Item> FRIGHT_SIGN_ITEM = ITEMS.register("fright_sign", () -> new SignItem(new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB).stacksTo(16), ModBlocksAndItems.FRIGHT_SIGN.get(), ModBlocksAndItems.FRIGHT_WALL_SIGN.get()));
    public static final RegistryObject<Item> FRIGHT_BOAT = ITEMS.register("fright_boat", () -> new ModBoatItem(new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB), ModBoat.Type.FRIGHT));
    public static final RegistryObject<Item> FRIGHT_SHARD = ITEMS.register("fright_shard", () -> new Item(new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Block> FRIGHT_SAPLING = registerBlock("fright_sapling", () -> new ModSaplingBlock(new ModTreeGrower("fright_tree"),BlockBehaviour.Properties.copy(Blocks.OAK_SAPLING), GIANT_SAPLING_PLACEABLE_ON), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> FRIGHT_LEAVES = registerBlock("fright_leaves", () -> new LeavesBlock(BlockBehaviour.Properties.copy(Blocks.OAK_LEAVES)) {@Override public boolean isFlammable(BlockState state, BlockGetter world, BlockPos pos, Direction face) {return true;}@Override public int getFlammability(BlockState state, BlockGetter world, BlockPos pos, Direction face) {return 60;}@Override public int getFireSpreadSpeed(BlockState state, BlockGetter world, BlockPos pos, Direction face) {return 30;}}, ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> MIGHT_LOG = registerBlock("might_log", () -> new ModFlammableRotatedPillarBlock(BlockBehaviour.Properties.copy(Blocks.OAK_LOG)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> STRIPPED_MIGHT_LOG = registerBlock("stripped_might_log", () -> new ModFlammableRotatedPillarBlock(BlockBehaviour.Properties.copy(Blocks.STRIPPED_OAK_LOG)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> MIGHT_WOOD = registerBlock("might_wood", () -> new ModFlammableRotatedPillarBlock(BlockBehaviour.Properties.copy(Blocks.OAK_WOOD)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> STRIPPED_MIGHT_WOOD = registerBlock("stripped_might_wood", () -> new ModFlammableRotatedPillarBlock(BlockBehaviour.Properties.copy(Blocks.STRIPPED_OAK_WOOD)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> MIGHT_PLANKS = registerBlock("might_planks", () -> new Block(BlockBehaviour.Properties.copy(Blocks.OAK_PLANKS)) {@Override public boolean isFlammable(BlockState state, BlockGetter world, BlockPos pos, Direction face) {return true;}@Override public int getFlammability(BlockState state, BlockGetter world, BlockPos pos, Direction face) {return 20;}@Override public int getFireSpreadSpeed(BlockState state, BlockGetter world, BlockPos pos, Direction face) {return 5;}}, ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> MIGHT_STAIRS = registerBlock("might_stairs", () -> new StairBlock(() -> ModBlocksAndItems.MIGHT_PLANKS.get().defaultBlockState(), BlockBehaviour.Properties.of(Material.WOOD).strength(1f)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> MIGHT_SLAB = registerBlock("might_slab", () -> new SlabBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(1f)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> MIGHT_FENCE = registerBlock("might_fence", () -> new FenceBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(1f).noCollission()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> MIGHT_FENCE_GATE = registerBlock("might_fence_gate", () -> new FenceGateBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(1f).noCollission()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> MIGHT_DOOR = registerBlock("might_door", () -> new DoorBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(1f).noOcclusion()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> MIGHT_TRAPDOOR = registerBlock("might_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(1f).noOcclusion()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> MIGHT_BUTTON = registerBlock("might_button", () -> new WoodButtonBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(1f).noCollission()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> MIGHT_PRESSURE_PLATE = registerBlock("might_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, BlockBehaviour.Properties.of(Material.WOOD).strength(1f)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> MIGHT_SIGN = BLOCKS.register("might_sign", () -> new MightStandingSignBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(1f).noCollission(), ModWoodTypes.MIGHT));
    public static final RegistryObject<Block> MIGHT_WALL_SIGN = BLOCKS.register("might_wall_sign", () -> new MightWallSignBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(1f).noCollission(), ModWoodTypes.MIGHT));
    public static final RegistryObject<Item> MIGHT_SIGN_ITEM = ITEMS.register("might_sign", () -> new SignItem(new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB).stacksTo(16), ModBlocksAndItems.MIGHT_SIGN.get(), ModBlocksAndItems.MIGHT_WALL_SIGN.get()));
    public static final RegistryObject<Item> MIGHT_BOAT = ITEMS.register("might_boat", () -> new ModBoatItem(new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB), ModBoat.Type.MIGHT));
    public static final RegistryObject<Item> MIGHT_SHARD = ITEMS.register("might_shard", () -> new Item(new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Block> MIGHT_SAPLING = registerBlock("might_sapling", () -> new ModSaplingBlock(new ModTreeGrower("might_tree"),BlockBehaviour.Properties.copy(Blocks.OAK_SAPLING), GIANT_SAPLING_PLACEABLE_ON), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> MIGHT_LEAVES = registerBlock("might_leaves", () -> new LeavesBlock(BlockBehaviour.Properties.copy(Blocks.OAK_LEAVES)) {@Override public boolean isFlammable(BlockState state, BlockGetter world, BlockPos pos, Direction face) {return true;}@Override public int getFlammability(BlockState state, BlockGetter world, BlockPos pos, Direction face) {return 60;}@Override public int getFireSpreadSpeed(BlockState state, BlockGetter world, BlockPos pos, Direction face) {return 30;}}, ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> DREAM_LOG = registerBlock("dream_log", () -> new ModFlammableRotatedPillarBlock(BlockBehaviour.Properties.copy(Blocks.OAK_LOG)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> STRIPPED_DREAM_LOG = registerBlock("stripped_dream_log", () -> new ModFlammableRotatedPillarBlock(BlockBehaviour.Properties.copy(Blocks.STRIPPED_OAK_LOG)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> DREAM_WOOD = registerBlock("dream_wood", () -> new ModFlammableRotatedPillarBlock(BlockBehaviour.Properties.copy(Blocks.OAK_WOOD)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> STRIPPED_DREAM_WOOD = registerBlock("stripped_dream_wood", () -> new ModFlammableRotatedPillarBlock(BlockBehaviour.Properties.copy(Blocks.STRIPPED_OAK_WOOD)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> DREAM_PLANKS = registerBlock("dream_planks", () -> new Block(BlockBehaviour.Properties.copy(Blocks.OAK_PLANKS)) {@Override public boolean isFlammable(BlockState state, BlockGetter world, BlockPos pos, Direction face) {return true;}@Override public int getFlammability(BlockState state, BlockGetter world, BlockPos pos, Direction face) {return 20;}@Override public int getFireSpreadSpeed(BlockState state, BlockGetter world, BlockPos pos, Direction face) {return 5;}}, ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> DREAM_STAIRS = registerBlock("dream_stairs", () -> new StairBlock(() -> ModBlocksAndItems.DREAM_PLANKS.get().defaultBlockState(), BlockBehaviour.Properties.of(Material.WOOD).strength(1f)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> DREAM_SLAB = registerBlock("dream_slab", () -> new SlabBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(1f)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> DREAM_FENCE = registerBlock("dream_fence", () -> new FenceBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(1f).noCollission()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> DREAM_FENCE_GATE = registerBlock("dream_fence_gate", () -> new FenceGateBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(1f).noCollission()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> DREAM_DOOR = registerBlock("dream_door", () -> new DoorBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(1f).noOcclusion()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> DREAM_TRAPDOOR = registerBlock("dream_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(1f).noOcclusion()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> DREAM_BUTTON = registerBlock("dream_button", () -> new WoodButtonBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(1f).noCollission()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> DREAM_PRESSURE_PLATE = registerBlock("dream_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, BlockBehaviour.Properties.of(Material.WOOD).strength(1f)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> DREAM_SIGN = BLOCKS.register("dream_sign", () -> new DreamStandingSignBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(1f).noCollission(), ModWoodTypes.DREAM));
    public static final RegistryObject<Block> DREAM_WALL_SIGN = BLOCKS.register("dream_wall_sign", () -> new DreamWallSignBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(1f).noCollission(), ModWoodTypes.DREAM));
    public static final RegistryObject<Item> DREAM_SIGN_ITEM = ITEMS.register("dream_sign", () -> new SignItem(new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB).stacksTo(16), ModBlocksAndItems.DREAM_SIGN.get(), ModBlocksAndItems.DREAM_WALL_SIGN.get()));
    public static final RegistryObject<Item> DREAM_BOAT = ITEMS.register("dream_boat", () -> new ModBoatItem(new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB), ModBoat.Type.DREAM));
    public static final RegistryObject<Item> DREAM_SHARD = ITEMS.register("dream_shard", () -> new Item(new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Block> DREAM_SAPLING = registerBlock("dream_sapling", () -> new ModSaplingBlock(new ModTreeGrower("dream_tree"),BlockBehaviour.Properties.copy(Blocks.OAK_SAPLING), DREAM_SAPLING_PLACEABLE_ON), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> DREAM_LEAVES = registerBlock("dream_leaves", () -> new LeavesBlock(BlockBehaviour.Properties.copy(Blocks.OAK_LEAVES)) {@Override public boolean isFlammable(BlockState state, BlockGetter world, BlockPos pos, Direction face) {return true;}@Override public int getFlammability(BlockState state, BlockGetter world, BlockPos pos, Direction face) {return 60;}@Override public int getFireSpreadSpeed(BlockState state, BlockGetter world, BlockPos pos, Direction face) {return 30;}}, ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> FRACTURED_LOG = registerBlock("fractured_log", () -> new ModFlammableRotatedPillarBlock(BlockBehaviour.Properties.copy(Blocks.OAK_LOG)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> FRACTURED_WOOD = registerBlock("fractured_wood", () -> new ModFlammableRotatedPillarBlock(BlockBehaviour.Properties.copy(Blocks.OAK_WOOD)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> STRIPPED_FRACTURED_LOG = registerBlock("stripped_fractured_log", () -> new ModFlammableRotatedPillarBlock(BlockBehaviour.Properties.copy(Blocks.STRIPPED_OAK_LOG)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> STRIPPED_FRACTURED_WOOD = registerBlock("stripped_fractured_wood", () -> new ModFlammableRotatedPillarBlock(BlockBehaviour.Properties.copy(Blocks.STRIPPED_OAK_WOOD)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> FRACTURED_PLANKS = registerBlock("fractured_planks", () -> new Block(BlockBehaviour.Properties.copy(Blocks.OAK_PLANKS)) {@Override public boolean isFlammable(BlockState state, BlockGetter world, BlockPos pos, Direction face) {return true;}@Override public int getFlammability(BlockState state, BlockGetter world, BlockPos pos, Direction face) {return 20;}@Override public int getFireSpreadSpeed(BlockState state, BlockGetter world, BlockPos pos, Direction face) {return 5;}}, ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> FRACTURED_STAIRS = registerBlock("fractured_stairs", () -> new StairBlock(() -> ModBlocksAndItems.FRACTURED_PLANKS.get().defaultBlockState(), BlockBehaviour.Properties.of(Material.WOOD).strength(1f)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> FRACTURED_SLAB = registerBlock("fractured_slab", () -> new SlabBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(1f)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> FRACTURED_FENCE = registerBlock("fractured_fence", () -> new FenceBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(1f).noCollission()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> FRACTURED_FENCE_GATE = registerBlock("fractured_fence_gate", () -> new FenceGateBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(1f).noCollission()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> FRACTURED_DOOR = registerBlock("fractured_door", () -> new DoorBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(1f).noOcclusion()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> FRACTURED_TRAPDOOR = registerBlock("fractured_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(1f).noOcclusion()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> FRACTURED_BUTTON = registerBlock("fractured_button", () -> new WoodButtonBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(1f).noCollission()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> FRACTURED_PRESSURE_PLATE = registerBlock("fractured_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, BlockBehaviour.Properties.of(Material.WOOD).strength(1f)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> FRACTURED_SIGN = BLOCKS.register("fractured_sign", () -> new FracturedStandingSignBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(1f).noCollission(), ModWoodTypes.FRACTURED));
    public static final RegistryObject<Block> FRACTURED_WALL_SIGN = BLOCKS.register("fractured_wall_sign", () -> new FracturedWallSignBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(1f).noCollission(), ModWoodTypes.FRACTURED));
    public static final RegistryObject<Item> FRACTURED_SIGN_ITEM = ITEMS.register("fractured_sign", () -> new SignItem(new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB).stacksTo(16), ModBlocksAndItems.FRACTURED_SIGN.get(), ModBlocksAndItems.FRACTURED_WALL_SIGN.get()));
    public static final RegistryObject<Item> FRACTURED_BOAT = ITEMS.register("fractured_boat", () -> new ModBoatItem(new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB), ModBoat.Type.FRACTURED));
    public static final RegistryObject<Item> FRACTURED_SHARD = ITEMS.register("fractured_shard", () -> new Item(new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Block> FRACTURED_SAPLING = registerBlock("fractured_sapling", () -> new ModSaplingBlock(new ModTreeGrower("fractured_tree"),BlockBehaviour.Properties.copy(Blocks.OAK_SAPLING), FRACTURED_SAPLING_PLACEABLE_ON), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> FRACTURED_LEAVES = registerBlock("fractured_leaves", () -> new LeavesBlock(BlockBehaviour.Properties.copy(Blocks.OAK_LEAVES)) {@Override public boolean isFlammable(BlockState state, BlockGetter world, BlockPos pos, Direction face) {return true;}@Override public int getFlammability(BlockState state, BlockGetter world, BlockPos pos, Direction face) {return 60;}@Override public int getFireSpreadSpeed(BlockState state, BlockGetter world, BlockPos pos, Direction face) {return 30;}}, ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> MAPLE_LOG = registerBlock("maple_log", () -> new ModFlammableRotatedPillarBlock(BlockBehaviour.Properties.copy(Blocks.OAK_LOG)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> MAPLE_WOOD = registerBlock("maple_wood", () -> new ModFlammableRotatedPillarBlock(BlockBehaviour.Properties.copy(Blocks.OAK_WOOD)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> STRIPPED_MAPLE_LOG = registerBlock("stripped_maple_log", () -> new ModFlammableRotatedPillarBlock(BlockBehaviour.Properties.copy(Blocks.STRIPPED_OAK_LOG)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> STRIPPED_MAPLE_WOOD = registerBlock("stripped_maple_wood", () -> new ModFlammableRotatedPillarBlock(BlockBehaviour.Properties.copy(Blocks.STRIPPED_OAK_WOOD)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> MAPLE_PLANKS = registerBlock("maple_planks", () -> new Block(BlockBehaviour.Properties.copy(Blocks.OAK_PLANKS)) {@Override public boolean isFlammable(BlockState state, BlockGetter world, BlockPos pos, Direction face) {return true;}@Override public int getFlammability(BlockState state, BlockGetter world, BlockPos pos, Direction face) {return 20;}@Override public int getFireSpreadSpeed(BlockState state, BlockGetter world, BlockPos pos, Direction face) {return 5;}}, ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> MAPLE_STAIRS = registerBlock("maple_stairs", () -> new StairBlock(() -> ModBlocksAndItems.MAPLE_PLANKS.get().defaultBlockState(), BlockBehaviour.Properties.of(Material.WOOD).strength(1f)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> MAPLE_SLAB = registerBlock("maple_slab", () -> new SlabBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(1f)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> MAPLE_FENCE = registerBlock("maple_fence", () -> new FenceBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(1f).noCollission()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> MAPLE_FENCE_GATE = registerBlock("maple_fence_gate", () -> new FenceGateBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(1f).noCollission()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> MAPLE_DOOR = registerBlock("maple_door", () -> new DoorBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(1f).noOcclusion()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> MAPLE_TRAPDOOR = registerBlock("maple_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(1f).noOcclusion()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> MAPLE_BUTTON = registerBlock("maple_button", () -> new WoodButtonBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(1f).noCollission()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> MAPLE_PRESSURE_PLATE = registerBlock("maple_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, BlockBehaviour.Properties.of(Material.WOOD).strength(1f)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> MAPLE_SIGN = BLOCKS.register("maple_sign", () -> new MapleStandingSignBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(1f).noCollission(), ModWoodTypes.MAPLE));
    public static final RegistryObject<Block> MAPLE_WALL_SIGN = BLOCKS.register("maple_wall_sign", () -> new MapleWallSignBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(1f).noCollission(), ModWoodTypes.MAPLE));
    public static final RegistryObject<Item> MAPLE_SIGN_ITEM = ITEMS.register("maple_sign", () -> new SignItem(new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB).stacksTo(16), ModBlocksAndItems.MAPLE_SIGN.get(), ModBlocksAndItems.MAPLE_WALL_SIGN.get()));
    public static final RegistryObject<Item> MAPLE_BOAT = ITEMS.register("maple_boat", () -> new ModBoatItem(new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB), ModBoat.Type.MAPLE));
    public static final RegistryObject<Item> MAPLE_SHARD = ITEMS.register("maple_shard", () -> new Item(new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Block> MAPLE_SAPLING_YELLOW = registerBlock("maple_sapling_yellow", () -> new SaplingBlock(new ModTreeGrower("maple_tree_yellow"),BlockBehaviour.Properties.copy(Blocks.OAK_SAPLING)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> MAPLE_LEAVES_YELLOW = registerBlock("maple_leaves_yellow", () -> new LeavesBlock(BlockBehaviour.Properties.copy(Blocks.OAK_LEAVES)) {@Override public boolean isFlammable(BlockState state, BlockGetter world, BlockPos pos, Direction face) {return true;}@Override public int getFlammability(BlockState state, BlockGetter world, BlockPos pos, Direction face) {return 60;}@Override public int getFireSpreadSpeed(BlockState state, BlockGetter world, BlockPos pos, Direction face) {return 30;}}, ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> MAPLE_SAPLING_ORANGE = registerBlock("maple_sapling_orange", () -> new SaplingBlock(new ModTreeGrower("maple_tree_orange"),BlockBehaviour.Properties.copy(Blocks.OAK_SAPLING)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> MAPLE_LEAVES_ORANGE = registerBlock("maple_leaves_orange", () -> new LeavesBlock(BlockBehaviour.Properties.copy(Blocks.OAK_LEAVES)) {@Override public boolean isFlammable(BlockState state, BlockGetter world, BlockPos pos, Direction face) {return true;}@Override public int getFlammability(BlockState state, BlockGetter world, BlockPos pos, Direction face) {return 60;}@Override public int getFireSpreadSpeed(BlockState state, BlockGetter world, BlockPos pos, Direction face) {return 30;}}, ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> MAPLE_SAPLING_RED = registerBlock("maple_sapling_red", () -> new SaplingBlock(new ModTreeGrower("maple_tree_red"),BlockBehaviour.Properties.copy(Blocks.OAK_SAPLING)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> MAPLE_LEAVES_RED = registerBlock("maple_leaves_red", () -> new LeavesBlock(BlockBehaviour.Properties.copy(Blocks.OAK_LEAVES)) {@Override public boolean isFlammable(BlockState state, BlockGetter world, BlockPos pos, Direction face) {return true;}@Override public int getFlammability(BlockState state, BlockGetter world, BlockPos pos, Direction face) {return 60;}@Override public int getFireSpreadSpeed(BlockState state, BlockGetter world, BlockPos pos, Direction face) {return 30;}}, ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> DUNGEON_CONCRETE = registerBlock("dungeon_concrete", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(6f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> DUNGEON_CONCRETE_PILLAR = registerBlock("dungeon_concrete_pillar", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(6f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> DUNGEON_CONCRETE_CHISELED = registerBlock("dungeon_concrete_chiseled", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(6f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> END_SPRING_DRAIN = registerBlock("end_spring_drain", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Item> SPRING_WATER_BUCKET = ITEMS.register("spring_water_bucket", () -> new BucketItem(ModFluids.SPRING_WATER_FLUID, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB).stacksTo(1)));
    public static final RegistryObject<Block> OVERWORLD_DUNGEON_BRICKS = registerBlock("overworld_dungeon_bricks", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(6f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> OVERWORLD_DUNGEON_BRICK_STAIRS = registerBlock("overworld_dungeon_brick_stairs", () -> new StairBlock(() -> ModBlocksAndItems.OVERWORLD_DUNGEON_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.of(Material.STONE).strength(6f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> OVERWORLD_DUNGEON_BRICK_SLAB = registerBlock("overworld_dungeon_brick_slab", () -> new SlabBlock(BlockBehaviour.Properties.of(Material.STONE).strength(6f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> OVERWORLD_DUNGEON_BRICKS_PILLAR = registerBlock("overworld_dungeon_bricks_pillar", () -> new ModRotatedPillarBlock(BlockBehaviour.Properties.of(Material.STONE).strength(6f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> OVERWORLD_DUNGEON_BRICKS_CHISELED = registerBlock("overworld_dungeon_bricks_chiseled", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(6f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> OVERWORLD_DUNGEON_BRICKS_KEYHOLE = registerBlock("overworld_dungeon_bricks_keyhole", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(6f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> OVERWORLD_DUNGEON_BRICKS_KEYED = registerBlock("overworld_dungeon_bricks_keyed", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(6f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> OVERWORLD_DUNGEON_BRICKS_CRACKED = registerBlock("overworld_dungeon_bricks_cracked", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(6f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Item> OVERWORLD_DUNGEON_KEY = ITEMS.register("overworld_dungeon_key", () -> new TransformKeyItem(new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB), OVERWORLD_DUNGEON_BRICKS_KEYHOLE.get(), OVERWORLD_DUNGEON_BRICKS_KEYED.get()));
    public static final RegistryObject<Block> NETHER_DUNGEON_BRICKS = registerBlock("nether_dungeon_bricks", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(6f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> NETHER_DUNGEON_BRICK_STAIRS = registerBlock("nether_dungeon_brick_stairs", () -> new StairBlock(() -> ModBlocksAndItems.NETHER_DUNGEON_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.of(Material.STONE).strength(6f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> NETHER_DUNGEON_BRICK_SLAB = registerBlock("nether_dungeon_brick_slab", () -> new SlabBlock(BlockBehaviour.Properties.of(Material.STONE).strength(6f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> NETHER_DUNGEON_BRICKS_PILLAR = registerBlock("nether_dungeon_bricks_pillar", () -> new ModRotatedPillarBlock(BlockBehaviour.Properties.of(Material.STONE).strength(6f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> NETHER_DUNGEON_BRICKS_CHISELED = registerBlock("nether_dungeon_bricks_chiseled", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(6f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> NETHER_DUNGEON_BRICKS_KEYHOLE = registerBlock("nether_dungeon_bricks_keyhole", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(6f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> NETHER_DUNGEON_BRICKS_KEYED = registerBlock("nether_dungeon_bricks_keyed", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(6f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> NETHER_DUNGEON_BRICKS_CRACKED = registerBlock("nether_dungeon_bricks_cracked", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(6f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Item> NETHER_DUNGEON_KEY = ITEMS.register("nether_dungeon_key", () -> new TransformKeyItem(new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB), NETHER_DUNGEON_BRICKS_KEYHOLE.get(), NETHER_DUNGEON_BRICKS_KEYED.get()));
    public static final RegistryObject<Block> END_DUNGEON_BRICKS = registerBlock("end_dungeon_bricks", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(6f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> END_DUNGEON_BRICK_STAIRS = registerBlock("end_dungeon_brick_stairs", () -> new StairBlock(() -> ModBlocksAndItems.END_DUNGEON_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.of(Material.STONE).strength(6f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> END_DUNGEON_BRICK_SLAB = registerBlock("end_dungeon_brick_slab", () -> new SlabBlock(BlockBehaviour.Properties.of(Material.STONE).strength(6f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> END_DUNGEON_BRICKS_PILLAR = registerBlock("end_dungeon_bricks_pillar", () -> new ModRotatedPillarBlock(BlockBehaviour.Properties.of(Material.STONE).strength(6f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> END_DUNGEON_BRICKS_CHISELED = registerBlock("end_dungeon_bricks_chiseled", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(6f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> END_DUNGEON_BRICKS_KEYHOLE = registerBlock("end_dungeon_bricks_keyhole", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(6f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> END_DUNGEON_BRICKS_KEYED = registerBlock("end_dungeon_bricks_keyed", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(6f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> END_DUNGEON_BRICKS_CRACKED = registerBlock("end_dungeon_bricks_cracked", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(6f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Item> END_DUNGEON_KEY = ITEMS.register("end_dungeon_key", () -> new TransformKeyItem(new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB), END_DUNGEON_BRICKS_KEYHOLE.get(), END_DUNGEON_BRICKS_KEYED.get()));
    public static final RegistryObject<Block> ASTEROID_WHITE = registerBlock("asteroid_white", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> ASTEROID_ORANGE = registerBlock("asteroid_orange", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> ASTEROID_MAGENTA = registerBlock("asteroid_magenta", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> ASTEROID_LIGHT_BLUE = registerBlock("asteroid_light_blue", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> ASTEROID_YELLOW = registerBlock("asteroid_yellow", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> ASTEROID_LIME = registerBlock("asteroid_lime", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> ASTEROID_PINK = registerBlock("asteroid_pink", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> ASTEROID_GRAY = registerBlock("asteroid_gray", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Item> DREAMERS_ANGUISH = ITEMS.register("dreamers_anguish", DreamersAnguishItem::new);
    public static final RegistryObject<Block> ASTEROID_LIGHT_GRAY = registerBlock("asteroid_light_gray", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> ASTEROID_CYAN = registerBlock("asteroid_cyan", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> ASTEROID_PURPLE = registerBlock("asteroid_purple", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> ASTEROID_BLUE = registerBlock("asteroid_blue", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> ASTEROID_BROWN = registerBlock("asteroid_brown", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> ASTEROID_GREEN = registerBlock("asteroid_green", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> ASTEROID_RED = registerBlock("asteroid_red", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> ASTEROID_BLACK = registerBlock("asteroid_black", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Item> DREAMERS_FRIGHT = ITEMS.register("dreamers_fright", DreamersFrightItem::new);
    public static final RegistryObject<Block> STAR_WHITE = registerBlock("star_white", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> STAR_ORANGE = registerBlock("star_orange", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> STAR_MAGENTA = registerBlock("star_magenta", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> STAR_LIGHT_BLUE = registerBlock("star_light_blue", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> STAR_YELLOW = registerBlock("star_yellow", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> STAR_LIME = registerBlock("star_lime", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> STAR_PINK = registerBlock("star_pink", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> STAR_GRAY = registerBlock("star_gray", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Item> DREAMERS_MIGHT = ITEMS.register("dreamers_might", DreamersMightItem::new);
    public static final RegistryObject<Block> STAR_LIGHT_GRAY = registerBlock("star_light_gray", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> STAR_CYAN = registerBlock("star_cyan", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> STAR_PURPLE = registerBlock("star_purple", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> STAR_BLUE = registerBlock("star_blue", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> STAR_BROWN = registerBlock("star_brown", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> STAR_GREEN = registerBlock("star_green", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> STAR_RED = registerBlock("star_red", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> STAR_BLACK = registerBlock("star_black", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Item> DREAMERS_LIFE = ITEMS.register("dreamers_life", DreamersLifeItem::new);
    public static final RegistryObject<Block> CARNELIAN_ORE = registerBlock("carnelian_ore", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> DEEPSLATE_CARNELIAN_ORE = registerBlock("deepslate_carnelian_ore", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> CARNELIAN_BLOCK = registerBlock("carnelian_block", () -> new Block(BlockBehaviour.Properties.of(Material.METAL).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Item> CARNELIAN = ITEMS.register("carnelian", () -> new Item(new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> CARNELIAN_SHARD = ITEMS.register("carnelian_shard", () -> new Item(new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> END_QUARTZ = ITEMS.register("end_quartz", () -> new Item(new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Block> END_QUARTZ_ORE = registerBlock("end_quartz_ore", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> END_QUARTZ_BLOCK = registerBlock("end_quartz_block", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> END_QUARTZ_BLOCK_STAIRS = registerBlock("end_quartz_block_stairs", () -> new StairBlock(() -> ModBlocksAndItems.END_QUARTZ_BLOCK.get().defaultBlockState(), BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> STRONTIUM_ORE = registerBlock("strontium_ore", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> DEEPSLATE_STRONTIUM_ORE = registerBlock("deepslate_strontium_ore", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> STRONTIUM_BLOCK = registerBlock("strontium_block", () -> new Block(BlockBehaviour.Properties.of(Material.METAL).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Item> STRONTIUM_INGOT = ITEMS.register("strontium_ingot", () -> new Item(new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> STRONTIUM_NUGGET = ITEMS.register("strontium_nugget", () -> new Item(new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Block> END_QUARTZ_BLOCK_SLAB = registerBlock("end_quartz_block_slab", () -> new SlabBlock(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> END_QUARTZ_BLOCK_PILLAR = registerBlock("end_quartz_block_pillar", () -> new ModRotatedPillarBlock(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> END_QUARTZ_BLOCK_CHISELED = registerBlock("end_quartz_block_chiseled", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> END_TORCH = BLOCKS.register("end_torch", () -> new ModTorchBlock(BlockBehaviour.Properties.of(Material.DECORATION).noCollission().instabreak().lightLevel((p_50886_) -> {return 14;}).sound(SoundType.WOOD), ParticleTypes.FLAME));
    public static final RegistryObject<Block> END_TORCH_WALL = BLOCKS.register("end_torch_wall", () -> new ModWallTorchBlock(BlockBehaviour.Properties.of(Material.DECORATION).noCollission().instabreak().lightLevel((p_50886_) -> {return 14;}).sound(SoundType.WOOD), ParticleTypes.FLAME));
    public static final RegistryObject<Item> END_TORCH_ITEM = ITEMS.register("end_torch_item", () -> new ModStandingAndWallBlockItem(ModBlocksAndItems.END_TORCH.get(), ModBlocksAndItems.END_TORCH_WALL.get(), (new Item.Properties()).tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Block> GARNET_ORE = registerBlock("garnet_ore", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> DEEPSLATE_GARNET_ORE = registerBlock("deepslate_garnet_ore", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> GARNET_BLOCK = registerBlock("garnet_block", () -> new Block(BlockBehaviour.Properties.of(Material.METAL).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Item> GARNET = ITEMS.register("garnet", () -> new Item(new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> GARNET_SHARD = ITEMS.register("garnet_shard", () -> new Item(new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> FIERY_QUARTZ = ITEMS.register("fiery_quartz", () -> new Item(new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Block> FIERY_QUARTZ_ORE = registerBlock("fiery_quartz_ore", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> FIERY_QUARTZ_BLOCK = registerBlock("fiery_quartz_block", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> FIERY_QUARTZ_BLOCK_STAIRS = registerBlock("fiery_quartz_block_stairs", () -> new StairBlock(() -> ModBlocksAndItems.FIERY_QUARTZ_BLOCK.get().defaultBlockState(), BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> AZURITE_ORE = registerBlock("azurite_ore", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> DEEPSLATE_AZURITE_ORE = registerBlock("deepslate_azurite_ore", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> AZURITE_BLOCK = registerBlock("azurite_block", () -> new Block(BlockBehaviour.Properties.of(Material.METAL).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Item> AZURITE = ITEMS.register("azurite", () -> new Item(new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> AZURITE_SHARD = ITEMS.register("azurite_shard", () -> new Item(new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Block> FIERY_QUARTZ_BLOCK_SLAB = registerBlock("fiery_quartz_block_slab", () -> new SlabBlock(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> FIERY_QUARTZ_BLOCK_PILLAR = registerBlock("fiery_quartz_block_pillar", () -> new ModRotatedPillarBlock(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> FIERY_QUARTZ_BLOCK_CHISELED = registerBlock("fiery_quartz_block_chiseled", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> NETHER_TORCH = BLOCKS.register("nether_torch", () -> new ModTorchBlock(BlockBehaviour.Properties.of(Material.DECORATION).noCollission().instabreak().lightLevel((p_50886_) -> {return 14;}).sound(SoundType.WOOD), ParticleTypes.FLAME));
    public static final RegistryObject<Block> NETHER_TORCH_WALL = BLOCKS.register("nether_torch_wall", () -> new ModWallTorchBlock(BlockBehaviour.Properties.of(Material.DECORATION).noCollission().instabreak().lightLevel((p_50886_) -> {return 14;}).sound(SoundType.WOOD), ParticleTypes.FLAME));
    public static final RegistryObject<Item> NETHER_TORCH_ITEM = ITEMS.register("nether_torch_item", () -> new ModStandingAndWallBlockItem(ModBlocksAndItems.NETHER_TORCH.get(), ModBlocksAndItems.NETHER_TORCH_WALL.get(), (new Item.Properties()).tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Block> SERENDIBITE_ORE = registerBlock("serendibite_ore", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> DEEPSLATE_SERENDIBITE_ORE = registerBlock("deepslate_serendibite_ore", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> SERENDIBITE_BLOCK = registerBlock("serendibite_block", () -> new Block(BlockBehaviour.Properties.of(Material.METAL).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Item> SERENDIBITE = ITEMS.register("serendibite", () -> new Item(new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> SERENDIBITE_SHARD = ITEMS.register("serendibite_shard", () -> new Item(new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Block> DREAMSCAPE_STONE = registerBlock("dreamscape_stone", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> DREAMSCAPE_COBBLESTONE = registerBlock("dreamscape_cobblestone", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> DREAMSCAPE_DIRT = registerBlock("dreamscape_dirt", () -> new Block(BlockBehaviour.Properties.of(Material.DIRT).strength(1f)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> DREAMSCAPE_GRASS_BLOCK = registerBlock("dreamscape_grass_block", () -> new Block(BlockBehaviour.Properties.of(Material.DIRT).strength(1f)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> AMBROSIA_ORE = registerBlock("ambrosia_ore", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> DEEPSLATE_AMBROSIA_ORE = registerBlock("deepslate_ambrosia_ore", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> AMBROSIA_BLOCK = registerBlock("ambrosia_block", () -> new Block(BlockBehaviour.Properties.of(Material.METAL).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Item> AMBROSIA = ITEMS.register("ambrosia", () -> new Item(new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> AMBROSIA_SHARD = ITEMS.register("ambrosia_shard", () -> new Item(new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Block> DREAMSCAPE_GRASS = registerBlock("dreamscape_grass", () -> new TallGrassBlock(BlockBehaviour.Properties.of(Material.REPLACEABLE_PLANT).dynamicShape().noCollission().instabreak().sound(SoundType.GRASS)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> DREAMSCAPE_TALL_GRASS = registerBlock("dreamscape_tall_grass", () -> new DoublePlantBlock(BlockBehaviour.Properties.of(Material.REPLACEABLE_PLANT).dynamicShape().noCollission().instabreak().sound(SoundType.GRASS)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> DREAMSCAPE_FERN = registerBlock("dreamscape_fern", () -> new TallGrassBlock(BlockBehaviour.Properties.of(Material.REPLACEABLE_PLANT).dynamicShape().noCollission().instabreak().sound(SoundType.GRASS)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> DREAMSCAPE_BUCKWEED = registerBlock("dreamscape_buckweed", () -> new TallGrassBlock(BlockBehaviour.Properties.of(Material.REPLACEABLE_PLANT).dynamicShape().noCollission().instabreak().sound(SoundType.GRASS)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> CHORUS_BRICKS = registerBlock("chorus_bricks", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> CHORUS_BRICK_STAIRS = registerBlock("chorus_brick_stairs", () -> new StairBlock(() -> ModBlocksAndItems.CHORUS_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> CHORUS_BRICK_SLAB = registerBlock("chorus_brick_slab", () -> new SlabBlock(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> OVERWORLD_QUARTZ_ORE = registerBlock("overworld_quartz_ore", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> PLACEHOLDER_3 = registerBlock("placeholder_3", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> DREAMSCAPE_TORNBELL = registerBlock("dreamscape_tornbell", () -> new TallGrassBlock(BlockBehaviour.Properties.of(Material.REPLACEABLE_PLANT).dynamicShape().noCollission().instabreak().sound(SoundType.GRASS)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> DREAMSCAPE_OXALLIS = registerBlock("dreamscape_oxallis", () -> new DoublePlantBlock(BlockBehaviour.Properties.of(Material.REPLACEABLE_PLANT).dynamicShape().noCollission().instabreak().sound(SoundType.GRASS)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> DRAGONFRUIT_CROP = BLOCKS.register("dragonfruit_crop", () -> new DragonfruitCropBlock(BlockBehaviour.Properties.copy(Blocks.BEETROOTS).noCollission().noOcclusion()));
    public static final RegistryObject<Item> DRAGONFRUIT_SEEDS = ITEMS.register("dragonfruit_seeds", () -> new ItemNameBlockItem(ModBlocksAndItems.DRAGONFRUIT_CROP.get(), new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> DRAGONFRUIT = ITEMS.register("dragonfruit", () -> new Item(new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB).food(ModFoods.DRAGONFRUIT)));
    public static final RegistryObject<Block> OVERGROWN_END_STONE = registerBlock("overgrown_end_stone", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> END_GRASS = registerBlock("end_grass", () -> new TallGrassBlock(BlockBehaviour.Properties.of(Material.REPLACEABLE_PLANT).dynamicShape().noCollission().instabreak().sound(SoundType.GRASS)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> END_TALL_GRASS = registerBlock("end_tall_grass", () -> new DoublePlantBlock(BlockBehaviour.Properties.of(Material.REPLACEABLE_PLANT).dynamicShape().noCollission().instabreak().sound(SoundType.GRASS)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> END_FERN = registerBlock("end_fern", () -> new TallGrassBlock(BlockBehaviour.Properties.of(Material.REPLACEABLE_PLANT).dynamicShape().noCollission().instabreak().sound(SoundType.GRASS)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> END_RAGWEED = registerBlock("end_ragweed", () -> new TallGrassBlock(BlockBehaviour.Properties.of(Material.REPLACEABLE_PLANT).dynamicShape().noCollission().instabreak().sound(SoundType.GRASS)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> ENDER_LILY = registerBlock("ender_lily", () -> new FlowerBlock(() -> MobEffects.LEVITATION, 4, BlockBehaviour.Properties.of(Material.REPLACEABLE_PLANT).dynamicShape().noCollission().instabreak().sound(SoundType.GRASS)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> ENDERS_DELIGHT = registerBlock("enders_delight", () -> new FlowerBlock(() -> MobEffects.LEVITATION, 4, BlockBehaviour.Properties.of(Material.REPLACEABLE_PLANT).dynamicShape().noCollission().instabreak().sound(SoundType.GRASS)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> END_DEATHTOLL = registerBlock("end_deathtoll", () -> new DoublePlantBlock(BlockBehaviour.Properties.of(Material.REPLACEABLE_PLANT).dynamicShape().noCollission().instabreak().sound(SoundType.GRASS)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> END_NIGHTSHADE = registerBlock("end_nightshade", () -> new DoublePlantBlock(BlockBehaviour.Properties.of(Material.REPLACEABLE_PLANT).dynamicShape().noCollission().instabreak().sound(SoundType.GRASS)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Item> ASTEROID_FIELD = ITEMS.register("asteroid_field_record", () -> new RecordItem(4, ModSounds.ASTEROID_FIELD, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB).stacksTo(1)));
    public static final RegistryObject<Item> FRACTURED_FOREST = ITEMS.register("fractured_forest_record", () -> new RecordItem(4, ModSounds.FRACTURED_FOREST, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB).stacksTo(1)));
    public static final RegistryObject<Item> DREAMSCAPE = ITEMS.register("dreamscape_record", () -> new RecordItem(4, ModSounds.DREAMSCAPE, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB).stacksTo(1)));
    public static final RegistryObject<Item> END_SPRINGS = ITEMS.register("end_springs_record", () -> new RecordItem(4, ModSounds.END_SPRINGS, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB).stacksTo(1)));
    public static final RegistryObject<Item> MINI_DUNGEON = ITEMS.register("mini_dungeon_record", () -> new RecordItem(4, ModSounds.MINI_DUNGEON, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB).stacksTo(1)));
    public static final RegistryObject<Item> OVERWORLD_DUNGEON = ITEMS.register("overworld_dungeon_record", () -> new RecordItem(4, ModSounds.OVERWORLD_DUNGEON, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB).stacksTo(1)));
    public static final RegistryObject<Item> NETHER_DUNGEON = ITEMS.register("nether_dungeon_record", () -> new RecordItem(4, ModSounds.NETHER_DUNGEON, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB).stacksTo(1)));
    public static final RegistryObject<Item> END_DUNGEON = ITEMS.register("end_dungeon_record", () -> new RecordItem(4, ModSounds.END_DUNGEON, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB).stacksTo(1)));
    public static final RegistryObject<Item> BOSS = ITEMS.register("boss_record", () -> new RecordItem(4, ModSounds.BOSS, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB).stacksTo(1)));
    public static final RegistryObject<Item> FINAL_BOSS = ITEMS.register("final_boss_record", () -> new RecordItem(4, ModSounds.FINAL_BOSS, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB).stacksTo(1)));
    public static final RegistryObject<Block> DURIAN_CROP = BLOCKS.register("durian_crop", () -> new DurianCropBlock(BlockBehaviour.Properties.copy(Blocks.BEETROOTS).noCollission().noOcclusion()));
    public static final RegistryObject<Item> DURIAN_SEEDS = ITEMS.register("durian_seeds", () -> new ItemNameBlockItem(ModBlocksAndItems.DURIAN_CROP.get(), new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> DURIAN = ITEMS.register("durian", () -> new Item(new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB).food(ModFoods.DURIAN)));
    public static final RegistryObject<Block> STARFRUIT_CROP = BLOCKS.register("starfruit_crop", () -> new StarfruitCropBlock(BlockBehaviour.Properties.copy(Blocks.BEETROOTS).noCollission().noOcclusion()));
    public static final RegistryObject<Item> STARFRUIT_SEEDS = ITEMS.register("starfruit_seeds", () -> new ItemNameBlockItem(ModBlocksAndItems.STARFRUIT_CROP.get(), new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<Item> STARFRUIT = ITEMS.register("starfruit", () -> new Item(new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB).food(ModFoods.STARFRUIT)));
    public static final RegistryObject<Item> DRAGONFRUIT_ICE_CREAM = ITEMS.register("dragonfruit_ice_cream", () -> new Item(new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB).food(ModFoods.DRAGONFRUIT_ICE_CREAM)));
    public static final RegistryObject<Item> DURIAN_ICE_CREAM = ITEMS.register("durian_ice_cream", () -> new Item(new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB).food(ModFoods.DURIAN_ICE_CREAM)));
    public static final RegistryObject<Item> STARFRUIT_ICE_CREAM = ITEMS.register("starfruit_ice_cream", () -> new Item(new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB).food(ModFoods.STARFRUIT_ICE_CREAM)));
    public static final RegistryObject<Item> FRUIT_SALAD = ITEMS.register("fruit_salad", () -> new Item(new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB).food(ModFoods.FRUIT_SALAD)));
    public static final RegistryObject<Item> RAW_HORSE_MEAT = ITEMS.register("raw_horse_meat", () -> new Item(new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB).food(ModFoods.RAW_HORSE_MEAT)));
    public static final RegistryObject<Item> COOKED_HORSE_MEAT = ITEMS.register("cooked_horse_meat", () -> new Item(new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB).food(ModFoods.COOKED_HORSE_MEAT)));
    public static final RegistryObject<Item> RAW_SUSPICIOUS_MEAT = ITEMS.register("raw_suspicious_meat", () -> new Item(new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB).food(ModFoods.RAW_SUSPICIOUS_MEAT)));
    public static final RegistryObject<Item> COOKED_SUSPICIOUS_MEAT = ITEMS.register("cooked_suspicious_meat", () -> new Item(new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB).food(ModFoods.COOKED_SUSPICIOUS_MEAT)));

    public static final RegistryObject<Block> FRACTURED_REALITY_PORTAL = BLOCKS.register("fractured_reality_portal", FracturedRealityPortalBlock::new);
    public static final RegistryObject<Block> FRACTURED_REALITY_PORTAL_FRAME = registerBlock("fractured_reality_portal_frame", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f)), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Item> CATALYST_ITEM_PLACEHOLDER = ITEMS.register("catalyst_item_placeholder", CatalystItem::new);
    public static final RegistryObject<Block> DUNGEON_LADDER = registerBlock("dungeon_ladder", () -> new ModLadderBlock(BlockBehaviour.Properties.of(Material.DECORATION).strength(0.4F).sound(SoundType.LADDER).noOcclusion()),ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> DREAMSCAPE_OVERGROWTH = registerBlock("dreamscape_overgrowth", () -> new DreamscapeOvergrowthBlock(BlockBehaviour.Properties.of(Material.REPLACEABLE_PLANT, MaterialColor.GLOW_LICHEN).noCollission().strength(0.2F).sound(SoundType.GLOW_LICHEN).lightLevel(DreamscapeOvergrowthBlock.emission(0))),ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<ForgeSpawnEggItem> CORRUPTED_ZOMBIE_SPAWN_EGG = ITEMS.register("corrupted_zombie_spawn_egg", () -> new ForgeSpawnEggItem(ModEntityTypes.CORRUPTED_ZOMBIE, 0x8d00b8,0x3700b8, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<ForgeSpawnEggItem> THUNDERBIRD_SPAWN_EGG = ITEMS.register("thunderbird_spawn_egg", () -> new ForgeSpawnEggItem(ModEntityTypes.THUNDERBIRD, 0x003bcf,0x00b0e6, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<ForgeSpawnEggItem> FRACTURED_WANDERER_SPAWN_EGG = ITEMS.register("fractured_wanderer_spawn_egg", () -> new ForgeSpawnEggItem(ModEntityTypes.FRACTURED_WANDERER, 0x630000,0xd13b3b, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<ForgeSpawnEggItem> SAND_ELEMENTAL_SPAWN_EGG = ITEMS.register("sand_elemental_spawn_egg", () -> new ForgeSpawnEggItem(ModEntityTypes.SAND_ELEMENTAL, 0xb09615,0xd1c847, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));
    public static final RegistryObject<ForgeSpawnEggItem> CRYSTAL_GOLEM_SPAWN_EGG = ITEMS.register("crystal_golem_spawn_egg", () -> new ForgeSpawnEggItem(ModEntityTypes.CRYSTAL_GOLEM, 0xa8a8a8,0xff29bf, new Item.Properties().tab(ModCreativeModeTab.COURSE_TAB)));

    public static final RegistryObject<Block> DREAMSCAPE_CARNELIAN_ORE = registerBlock("dreamscape_carnelian_ore", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> DREAMSCAPE_STRONTIUM_ORE = registerBlock("dreamscape_strontium_ore", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> DREAMSCAPE_GARNET_ORE = registerBlock("dreamscape_garnet_ore", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> DREAMSCAPE_AZURITE_ORE = registerBlock("dreamscape_azurite_ore", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> DREAMSCAPE_SERENDIBITE_ORE = registerBlock("dreamscape_serendibite_ore", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> DREAMSCAPE_AMBROSIA_ORE = registerBlock("dreamscape_ambrosia_ore", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> END_CARNELIAN_ORE = registerBlock("end_carnelian_ore", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> END_STRONTIUM_ORE = registerBlock("end_strontium_ore", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> END_GARNET_ORE = registerBlock("end_garnet_ore", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> END_AZURITE_ORE = registerBlock("end_azurite_ore", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> END_SERENDIBITE_ORE = registerBlock("end_serendibite_ore", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> END_AMBROSIA_ORE = registerBlock("end_ambrosia_ore", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> NETHER_CARNELIAN_ORE = registerBlock("nether_carnelian_ore", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> NETHER_STRONTIUM_ORE = registerBlock("nether_strontium_ore", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> NETHER_GARNET_ORE = registerBlock("nether_garnet_ore", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> NETHER_AZURITE_ORE = registerBlock("nether_azurite_ore", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> NETHER_SERENDIBITE_ORE = registerBlock("nether_serendibite_ore", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> NETHER_AMBROSIA_ORE = registerBlock("nether_ambrosia_ore", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);

    public static final RegistryObject<Block> CHORUS_BRICKS_PILLAR = registerBlock("chorus_bricks_pillar", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);
    public static final RegistryObject<Block> CHORUS_BRICKS_CHISELED = registerBlock("chorus_bricks_chiseled", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1f).requiresCorrectToolForDrops()), ModCreativeModeTab.COURSE_TAB);

    private static <T extends Block> RegistryObject<T> registerBlock(String name, Supplier<T> block, CreativeModeTab tab) {RegistryObject<T> toReturn = BLOCKS.register(name, block);registerBlockItem(name, toReturn, tab);return toReturn;}
    private static <T extends Block> RegistryObject<Item> registerBlockItem(String name, RegistryObject<T> block, CreativeModeTab tab) {return ModBlocksAndItems.ITEMS.register(name, () -> new BlockItem(block.get(), new Item.Properties().tab(tab)));}

    public static void register (IEventBus eventBus) {BLOCKS.register(eventBus);ITEMS.register(eventBus);}
}
